//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle

  let reuseIdentifier = reuseIdentifier()

  var color: color { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }
  }

  /// This `_R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `LoadingCell`.
    var loadingCell: RswiftResources.NibReferenceReuseIdentifier<LoadingCell, LoadingCell> { .init(name: "LoadingCell", bundle: bundle, identifier: "LoadingCell") }

    /// Nib `MovieDetailViewController`.
    var movieDetailViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "MovieDetailViewController", bundle: bundle) }

    /// Nib `MovieListCell`.
    var movieListCell: RswiftResources.NibReferenceReuseIdentifier<MovieListCell, MovieListCell> { .init(name: "MovieListCell", bundle: bundle, identifier: "MovieListCell") }

    /// Nib `MoviesViewController`.
    var moviesViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "MoviesViewController", bundle: bundle) }

    /// Nib `NoResultsCell`.
    var noResultsCell: RswiftResources.NibReferenceReuseIdentifier<NoResultsCell, NoResultsCell> { .init(name: "NoResultsCell", bundle: bundle, identifier: "NoResultsCell") }

    func validate() throws {

    }
  }

  /// This `_R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {

    /// Reuse identifier `LoadingCell`.
    let loadingCell: RswiftResources.ReuseIdentifier<LoadingCell> = .init(identifier: "LoadingCell")

    /// Reuse identifier `MovieListCell`.
    let movieListCell: RswiftResources.ReuseIdentifier<MovieListCell> = .init(identifier: "MovieListCell")

    /// Reuse identifier `NoResultsCell`.
    let noResultsCell: RswiftResources.ReuseIdentifier<NoResultsCell> = .init(identifier: "NoResultsCell")
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }
  }
}